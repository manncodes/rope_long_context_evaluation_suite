[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rope_long_context_evaluation_suite"
version = "0.2.0"
description = "A comprehensive evaluation framework for long context RoPE extension methods with hyperparameter sweeping"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "accelerate>=0.20.0",
    "tokenizers>=0.13.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
    "wandb>=0.15.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    # API providers moved to optional dependencies
    "einops>=0.7.0",
    "flash-attn>=2.0.0; platform_system == 'Linux'",
    "bitsandbytes>=0.41.0",
    "peft>=0.4.0",
    # Core benchmark dependencies only
    "tiktoken>=0.5.1",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
evaluation = [
    "rouge-score>=0.1.2",
    "nltk>=3.8.1",
    "bert-score>=0.3.13",
    "sacrebleu>=2.3.1",
    "evaluate>=0.4.0",
]
api-providers = [
    # API provider dependencies - install only if using API models
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "cohere>=5.1.2",
    "google-generativeai",
    "langchain-openai",
    "langchain-anthropic",
    "langchain-cohere",
]
benchmarks = [
    # Official benchmark dependencies - heavy packages
    "langchain>=0.1.9",
    "langchain-community>=0.0.24", 
    "langchain-core>=0.1.26",
    "langsmith>=0.1.8",
    "tenacity>=8.2.3",
    "wonderwords",
    "html2text",
    "flask",
    "flask-restful",
    "vllm>=0.5.3",
]

[project.urls]
Homepage = "https://github.com/Your Name/rope_long_context_evaluation_suite"
Repository = "https://github.com/Your Name/rope_long_context_evaluation_suite"
Documentation = "https://rope_long_context_evaluation_suite.readthedocs.io"
"Bug Tracker" = "https://github.com/Your Name/rope_long_context_evaluation_suite/issues"

[project.scripts]
rope-eval = "rope_long_context_evaluation_suite.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"


[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''



[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88



[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true



[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/rope_long_context_evaluation_suite",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-ra",
]


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == \\.__main__\\.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]